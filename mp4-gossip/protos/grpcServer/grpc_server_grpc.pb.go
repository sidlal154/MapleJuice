// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc_server.proto

package grpcServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServerClient is the client API for GrpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServerClient interface {
	SendWrite(ctx context.Context, opts ...grpc.CallOption) (GrpcServer_SendWriteClient, error)
	SendRead(ctx context.Context, in *SendReadRequest, opts ...grpc.CallOption) (*SendReadResponse, error)
	GetReadFile(ctx context.Context, in *GetReadFileRequest, opts ...grpc.CallOption) (GrpcServer_GetReadFileClient, error)
	RemoteRead(ctx context.Context, in *RemoteReadRequest, opts ...grpc.CallOption) (*RemoteReadResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	TopPeek(ctx context.Context, in *TopPeekRequest, opts ...grpc.CallOption) (*TopPeekResponse, error)
	NotifyMaple(ctx context.Context, in *NotifyMapleRequest, opts ...grpc.CallOption) (*NotifyMapleResponse, error)
	AllotMaple(ctx context.Context, in *AllotMapleRequest, opts ...grpc.CallOption) (GrpcServer_AllotMapleClient, error)
	NotifyJuice(ctx context.Context, in *NotifyJuiceRequest, opts ...grpc.CallOption) (*NotifyJuiceResponse, error)
	AllotJuice(ctx context.Context, in *AllotJuiceRequest, opts ...grpc.CallOption) (GrpcServer_AllotJuiceClient, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (GrpcServer_SendFileClient, error)
	NotifySQL(ctx context.Context, in *NotifySQLRequest, opts ...grpc.CallOption) (*NotifySQLResponse, error)
}

type grpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServerClient(cc grpc.ClientConnInterface) GrpcServerClient {
	return &grpcServerClient{cc}
}

func (c *grpcServerClient) SendWrite(ctx context.Context, opts ...grpc.CallOption) (GrpcServer_SendWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServer_ServiceDesc.Streams[0], "/protos.GrpcServer/SendWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerSendWriteClient{stream}
	return x, nil
}

type GrpcServer_SendWriteClient interface {
	Send(*SendWriteRequest) error
	CloseAndRecv() (*SendWriteResponse, error)
	grpc.ClientStream
}

type grpcServerSendWriteClient struct {
	grpc.ClientStream
}

func (x *grpcServerSendWriteClient) Send(m *SendWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServerSendWriteClient) CloseAndRecv() (*SendWriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServerClient) SendRead(ctx context.Context, in *SendReadRequest, opts ...grpc.CallOption) (*SendReadResponse, error) {
	out := new(SendReadResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/SendRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) GetReadFile(ctx context.Context, in *GetReadFileRequest, opts ...grpc.CallOption) (GrpcServer_GetReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServer_ServiceDesc.Streams[1], "/protos.GrpcServer/GetReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerGetReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcServer_GetReadFileClient interface {
	Recv() (*GetByteArrayResponse, error)
	grpc.ClientStream
}

type grpcServerGetReadFileClient struct {
	grpc.ClientStream
}

func (x *grpcServerGetReadFileClient) Recv() (*GetByteArrayResponse, error) {
	m := new(GetByteArrayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServerClient) RemoteRead(ctx context.Context, in *RemoteReadRequest, opts ...grpc.CallOption) (*RemoteReadResponse, error) {
	out := new(RemoteReadResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/RemoteRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) TopPeek(ctx context.Context, in *TopPeekRequest, opts ...grpc.CallOption) (*TopPeekResponse, error) {
	out := new(TopPeekResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/TopPeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) NotifyMaple(ctx context.Context, in *NotifyMapleRequest, opts ...grpc.CallOption) (*NotifyMapleResponse, error) {
	out := new(NotifyMapleResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/NotifyMaple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) AllotMaple(ctx context.Context, in *AllotMapleRequest, opts ...grpc.CallOption) (GrpcServer_AllotMapleClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServer_ServiceDesc.Streams[2], "/protos.GrpcServer/AllotMaple", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerAllotMapleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcServer_AllotMapleClient interface {
	Recv() (*AllotMapleResponse, error)
	grpc.ClientStream
}

type grpcServerAllotMapleClient struct {
	grpc.ClientStream
}

func (x *grpcServerAllotMapleClient) Recv() (*AllotMapleResponse, error) {
	m := new(AllotMapleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServerClient) NotifyJuice(ctx context.Context, in *NotifyJuiceRequest, opts ...grpc.CallOption) (*NotifyJuiceResponse, error) {
	out := new(NotifyJuiceResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/NotifyJuice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) AllotJuice(ctx context.Context, in *AllotJuiceRequest, opts ...grpc.CallOption) (GrpcServer_AllotJuiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServer_ServiceDesc.Streams[3], "/protos.GrpcServer/AllotJuice", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerAllotJuiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcServer_AllotJuiceClient interface {
	Recv() (*AllotJuiceResponse, error)
	grpc.ClientStream
}

type grpcServerAllotJuiceClient struct {
	grpc.ClientStream
}

func (x *grpcServerAllotJuiceClient) Recv() (*AllotJuiceResponse, error) {
	m := new(AllotJuiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServerClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (GrpcServer_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServer_ServiceDesc.Streams[4], "/protos.GrpcServer/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerSendFileClient{stream}
	return x, nil
}

type GrpcServer_SendFileClient interface {
	Send(*SendWriteRequest) error
	CloseAndRecv() (*SendWriteResponse, error)
	grpc.ClientStream
}

type grpcServerSendFileClient struct {
	grpc.ClientStream
}

func (x *grpcServerSendFileClient) Send(m *SendWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServerSendFileClient) CloseAndRecv() (*SendWriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServerClient) NotifySQL(ctx context.Context, in *NotifySQLRequest, opts ...grpc.CallOption) (*NotifySQLResponse, error) {
	out := new(NotifySQLResponse)
	err := c.cc.Invoke(ctx, "/protos.GrpcServer/NotifySQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServerServer is the server API for GrpcServer service.
// All implementations must embed UnimplementedGrpcServerServer
// for forward compatibility
type GrpcServerServer interface {
	SendWrite(GrpcServer_SendWriteServer) error
	SendRead(context.Context, *SendReadRequest) (*SendReadResponse, error)
	GetReadFile(*GetReadFileRequest, GrpcServer_GetReadFileServer) error
	RemoteRead(context.Context, *RemoteReadRequest) (*RemoteReadResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	TopPeek(context.Context, *TopPeekRequest) (*TopPeekResponse, error)
	NotifyMaple(context.Context, *NotifyMapleRequest) (*NotifyMapleResponse, error)
	AllotMaple(*AllotMapleRequest, GrpcServer_AllotMapleServer) error
	NotifyJuice(context.Context, *NotifyJuiceRequest) (*NotifyJuiceResponse, error)
	AllotJuice(*AllotJuiceRequest, GrpcServer_AllotJuiceServer) error
	SendFile(GrpcServer_SendFileServer) error
	NotifySQL(context.Context, *NotifySQLRequest) (*NotifySQLResponse, error)
	mustEmbedUnimplementedGrpcServerServer()
}

// UnimplementedGrpcServerServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServerServer struct {
}

func (UnimplementedGrpcServerServer) SendWrite(GrpcServer_SendWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method SendWrite not implemented")
}
func (UnimplementedGrpcServerServer) SendRead(context.Context, *SendReadRequest) (*SendReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRead not implemented")
}
func (UnimplementedGrpcServerServer) GetReadFile(*GetReadFileRequest, GrpcServer_GetReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReadFile not implemented")
}
func (UnimplementedGrpcServerServer) RemoteRead(context.Context, *RemoteReadRequest) (*RemoteReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteRead not implemented")
}
func (UnimplementedGrpcServerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedGrpcServerServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedGrpcServerServer) Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedGrpcServerServer) TopPeek(context.Context, *TopPeekRequest) (*TopPeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPeek not implemented")
}
func (UnimplementedGrpcServerServer) NotifyMaple(context.Context, *NotifyMapleRequest) (*NotifyMapleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMaple not implemented")
}
func (UnimplementedGrpcServerServer) AllotMaple(*AllotMapleRequest, GrpcServer_AllotMapleServer) error {
	return status.Errorf(codes.Unimplemented, "method AllotMaple not implemented")
}
func (UnimplementedGrpcServerServer) NotifyJuice(context.Context, *NotifyJuiceRequest) (*NotifyJuiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyJuice not implemented")
}
func (UnimplementedGrpcServerServer) AllotJuice(*AllotJuiceRequest, GrpcServer_AllotJuiceServer) error {
	return status.Errorf(codes.Unimplemented, "method AllotJuice not implemented")
}
func (UnimplementedGrpcServerServer) SendFile(GrpcServer_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedGrpcServerServer) NotifySQL(context.Context, *NotifySQLRequest) (*NotifySQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySQL not implemented")
}
func (UnimplementedGrpcServerServer) mustEmbedUnimplementedGrpcServerServer() {}

// UnsafeGrpcServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServerServer will
// result in compilation errors.
type UnsafeGrpcServerServer interface {
	mustEmbedUnimplementedGrpcServerServer()
}

func RegisterGrpcServerServer(s grpc.ServiceRegistrar, srv GrpcServerServer) {
	s.RegisterService(&GrpcServer_ServiceDesc, srv)
}

func _GrpcServer_SendWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServerServer).SendWrite(&grpcServerSendWriteServer{stream})
}

type GrpcServer_SendWriteServer interface {
	SendAndClose(*SendWriteResponse) error
	Recv() (*SendWriteRequest, error)
	grpc.ServerStream
}

type grpcServerSendWriteServer struct {
	grpc.ServerStream
}

func (x *grpcServerSendWriteServer) SendAndClose(m *SendWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServerSendWriteServer) Recv() (*SendWriteRequest, error) {
	m := new(SendWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcServer_SendRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).SendRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/SendRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).SendRead(ctx, req.(*SendReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_GetReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServerServer).GetReadFile(m, &grpcServerGetReadFileServer{stream})
}

type GrpcServer_GetReadFileServer interface {
	Send(*GetByteArrayResponse) error
	grpc.ServerStream
}

type grpcServerGetReadFileServer struct {
	grpc.ServerStream
}

func (x *grpcServerGetReadFileServer) Send(m *GetByteArrayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcServer_RemoteRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).RemoteRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/RemoteRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).RemoteRead(ctx, req.(*RemoteReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_TopPeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopPeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).TopPeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/TopPeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).TopPeek(ctx, req.(*TopPeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_NotifyMaple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMapleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).NotifyMaple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/NotifyMaple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).NotifyMaple(ctx, req.(*NotifyMapleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_AllotMaple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllotMapleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServerServer).AllotMaple(m, &grpcServerAllotMapleServer{stream})
}

type GrpcServer_AllotMapleServer interface {
	Send(*AllotMapleResponse) error
	grpc.ServerStream
}

type grpcServerAllotMapleServer struct {
	grpc.ServerStream
}

func (x *grpcServerAllotMapleServer) Send(m *AllotMapleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcServer_NotifyJuice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyJuiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).NotifyJuice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/NotifyJuice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).NotifyJuice(ctx, req.(*NotifyJuiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_AllotJuice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllotJuiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServerServer).AllotJuice(m, &grpcServerAllotJuiceServer{stream})
}

type GrpcServer_AllotJuiceServer interface {
	Send(*AllotJuiceResponse) error
	grpc.ServerStream
}

type grpcServerAllotJuiceServer struct {
	grpc.ServerStream
}

func (x *grpcServerAllotJuiceServer) Send(m *AllotJuiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcServer_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServerServer).SendFile(&grpcServerSendFileServer{stream})
}

type GrpcServer_SendFileServer interface {
	SendAndClose(*SendWriteResponse) error
	Recv() (*SendWriteRequest, error)
	grpc.ServerStream
}

type grpcServerSendFileServer struct {
	grpc.ServerStream
}

func (x *grpcServerSendFileServer) SendAndClose(m *SendWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServerSendFileServer) Recv() (*SendWriteRequest, error) {
	m := new(SendWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcServer_NotifySQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifySQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).NotifySQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GrpcServer/NotifySQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).NotifySQL(ctx, req.(*NotifySQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcServer_ServiceDesc is the grpc.ServiceDesc for GrpcServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GrpcServer",
	HandlerType: (*GrpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRead",
			Handler:    _GrpcServer_SendRead_Handler,
		},
		{
			MethodName: "RemoteRead",
			Handler:    _GrpcServer_RemoteRead_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _GrpcServer_DeleteFile_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _GrpcServer_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _GrpcServer_Dequeue_Handler,
		},
		{
			MethodName: "TopPeek",
			Handler:    _GrpcServer_TopPeek_Handler,
		},
		{
			MethodName: "NotifyMaple",
			Handler:    _GrpcServer_NotifyMaple_Handler,
		},
		{
			MethodName: "NotifyJuice",
			Handler:    _GrpcServer_NotifyJuice_Handler,
		},
		{
			MethodName: "NotifySQL",
			Handler:    _GrpcServer_NotifySQL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendWrite",
			Handler:       _GrpcServer_SendWrite_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetReadFile",
			Handler:       _GrpcServer_GetReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AllotMaple",
			Handler:       _GrpcServer_AllotMaple_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AllotJuice",
			Handler:       _GrpcServer_AllotJuice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _GrpcServer_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_server.proto",
}
